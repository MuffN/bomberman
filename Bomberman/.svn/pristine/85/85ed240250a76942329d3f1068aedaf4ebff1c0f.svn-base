package bomberman.entities;

import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.List;

import bomberman.maingame.Game;
import bomberman.maingame.Launcher;
import bomberman.maingame.Map;

/**
 * Character class with usage aimed at
 * player and bot class
 * 
 * @author Lukas Pruetzel
 *
 */
public abstract class Character extends Entity {
	
	private Bomb myBomb = null;
	private long bombTime = 0;
	private boolean placedBomb = false;
	private boolean passBomb = false;
	private Rectangle myRect;
	
	private List <Rectangle> passBombList = new ArrayList<Rectangle>();
	
	public static List <Character> characterList = new ArrayList<Character>();
	

	public List<Rectangle> getPassBombList() {
		return passBombList;
	}

	public void setPassBombList(List<Rectangle> passBombList) {
		this.passBombList = passBombList;
	}
	
	public Rectangle getMyRect() {
		return myRect;
	}
	
	public void setMyRect(Rectangle myRect) {
		this.myRect = myRect;
	}
	

	/**
	 * Character constructor
	 * @param game Game object, used primarily to access the keyboard inside the player class
	 * @param x the X position at which a character is spawned
	 * @param y the Y position at which a character is spawned
	 * @param size the size of the character, used to determine where a character stops at the borders
	 */
	public Character(Game game, int x, int y, int size) {
		super(game,x,y,size);
		
	}
	
	/**
	 * increases the characters X position
	 */
	public void up() {
		if(getY()>60) {
			changeY(-1);
		}
	}
	
	/**
	 * decreases the characters X position
	 */
	public void down() {
		if(getY()<Launcher.gameHeight - getSize()-60) {
			changeY(1);
		}
	}
	
	/**
	 * decreases the characters Y position
	 */
	public void left() {
		if(getX()>60) {
			changeX(-1);
		}
	}
	
	/**
	 * increases the characters Y position
	 */
	public void right() {
		if(getX()<Launcher.gameWidth - getSize()-60) {
			changeX(1);
		}
	}
	
	/**
	 * update method to be implemented in sub classes
	 */
	public abstract void update();
	
	public boolean checkNZGCollision(Rectangle myRect) {
		for (Rectangle rect : Map.nzgList) {
			if(rect == null) {
				return false;
			}
			if(myRect.intersects(rect)) {
				System.out.println("COLLISION NZG");
				return true;
			}
		}
		return false;
	}
	
//	public boolean checkZGCollision(Rectangle myRect){
//		for (Rectangle rect : Map.zgList){
//			if(rect == null){
//			}
//			else if(myRect.intersects(rect)){
//				System.out.println("COLLISION ZG");
//				return true;
//			}
//	
//		}
//		return false;
//	}
	
	public boolean checkCollision(Rectangle myRect, List<Rectangle>rectList){
		
		for (Rectangle rect : rectList) {
			
			if(myRect.intersects(rect)){
				System.out.println("COLLISION " + rectList.getClass().getName());
				return true;
			}

		}
		
		return false;
	}

	public Bomb getMyBomb() {
		return myBomb;
	}

	public void setMyBomb(Bomb myBomb) {
		this.myBomb = myBomb;
	}

	public long getBombTime() {
		return bombTime;
	}

	public void setBombTime(long bombTime) {
		this.bombTime = bombTime;
	}

	public boolean isPlacedBomb() {
		return placedBomb;
	}

	public void setPlacedBomb(boolean placedBomb) {
		this.placedBomb = placedBomb;
	}

	public void placeBomb(int bombX, int bombY) {
		if(!isPlacedBomb()) {
			System.out.println("BOMB PLACED");
			this.setBombTime(System.nanoTime());
			setPlacedBomb(true);

			this.setMyBomb(new Bomb(bombX,bombY));
		}
	}
	
	public boolean collisionMove(Rectangle myRect, boolean passBomb){
		
		myRect.setLocation(getNextX(), getNextY());
	//	checkBombs();
		if(passBomb == true) {
			if(!this.checkCollision(myRect, Map.zgList) && !this.checkCollision(myRect, Map.nzgList) && 
					!this.checkCollision(myRect, Map.bombList)) {
				this.setPassBomb(false);
				System.out.println("NICHT IN BOMBE: " + this.getPassBomb());
				this.move();
				return true;
			} else if(!this.checkCollision(myRect, Map.zgList) && !this.checkCollision(myRect, Map.nzgList)) {
				this.move();

				System.out.println("IN BOMBE:" + this.getPassBomb());
				return true;
			} else {
				myRect.setLocation(getX(), getY());
				resetNextXY();
				return false;
			}
		} else {
			if(!this.checkCollision(myRect, Map.zgList) && !this.checkCollision(myRect, Map.nzgList) && !this.checkCollision(myRect, Map.bombList)) {
				this.move();
				return true;
			} else {
				myRect.setLocation(getX(), getY());
				resetNextXY();
				return false;
			}
		}
		
		
	}

	private void checkBombs(){
		
		for(Character character : Character.characterList){
			
			for(Rectangle bomb : character.getPassBombList()){
				
				if(bomb.intersects(character.getMyRect())){
					character.getPassBombList().remove(bomb);
				}
			}
			

			
			
		}
		
	}
	
	public boolean getPassBomb() {
		return passBomb;
	}

	public void setPassBomb(boolean passBomb) {
		this.passBomb = passBomb;
	}
	
}
