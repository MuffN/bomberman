package bomberman.menu;

import java.awt.Color;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.SwingConstants;

import bomberman.entities.MenuPanel;
import bomberman.tools.Asset;

import javax.swing.JButton;

/**
 * 
 * @author Patrick Schneider
 * 
 */
public class MultiplayerBotmenu extends MenuPanel implements ActionListener{
	private static final long serialVersionUID = 1L;
		
	private JButton[] multiplayerBotbuttons;
	private static String[] buttonNames = {"WITHOUT BOTS","1 BOT","2 BOTS","GO BACK","QUIT GAME"};
	
	public MultiplayerBotmenu() {
		
		multiplayerBotbuttons = new JButton[buttonNames.length];
		
		for(int i = 0; i < buttonNames.length; i++){

			final int curButton = i;
			
			multiplayerBotbuttons[i] = new JButton(buttonNames[i]);
			multiplayerBotbuttons[i].setFocusable(true);
			multiplayerBotbuttons[i].setMargin(new Insets(0, 0, 0, 0));
			multiplayerBotbuttons[i].setContentAreaFilled(false);
			multiplayerBotbuttons[i].setIcon(blackBackground);
			multiplayerBotbuttons[i].setOpaque(false);
			multiplayerBotbuttons[i].setForeground(Color.YELLOW);
			multiplayerBotbuttons[i].setHorizontalTextPosition(SwingConstants.CENTER);
			multiplayerBotbuttons[i].setBorder(null);
			multiplayerBotbuttons[i].setBackground(Color.BLACK);
			multiplayerBotbuttons[i].setFocusPainted(false);
			multiplayerBotbuttons[i].setFont(Asset.pcsenior.deriveFont(20f));
			multiplayerBotbuttons[i].addActionListener(this);
			multiplayerBotbuttons[i].setActionCommand(buttonNames[i]);
			multiplayerBotbuttons[i].addKeyListener(new KeyAdapter(){
				@Override
				public void keyPressed(KeyEvent e){
					switch (e.getKeyCode()){
					case KeyEvent.VK_UP:
						if(curButton > 0){
							multiplayerBotbuttons[curButton - 1].requestFocus();
						}
						break;
					case KeyEvent.VK_DOWN:
						if(curButton < 4){
							multiplayerBotbuttons[curButton + 1].requestFocus();
						}
						break;
					default:
						break;
					}
					
				}
			});
			multiplayerBotbuttons[i].addFocusListener(new FocusListener() {

		         @Override
		         public void focusLost(FocusEvent arg0) {
		        	multiplayerBotbuttons[curButton].setForeground(Color.YELLOW);
		            multiplayerBotbuttons[curButton].setIcon(blackBackground);
		         }

		         @Override
		         public void focusGained(FocusEvent arg0) {
		        	 multiplayerBotbuttons[curButton].setForeground(Color.RED);
		            multiplayerBotbuttons[curButton].setIcon(arrowBackground);
		         }
		      });
		}
		
		multiplayerBotbuttons[0].setBounds(250, 410, 400, 40);
		multiplayerBotbuttons[1].setBounds(250, 450, 400, 40);
		multiplayerBotbuttons[2].setBounds(250, 490, 400, 40);
		multiplayerBotbuttons[3].setBounds(250, 530, 400, 40);
		multiplayerBotbuttons[4].setBounds(250, 570, 400, 40);
		
		multiplayerBotbuttons[0].setBackground(Color.CYAN);
		
		for (int j = 0; j < buttonNames.length; j++){
			add(multiplayerBotbuttons[j]);
		}
	}
	
	@Override
	public void actionPerformed(ActionEvent ae){
		if("WITHOUT BOTS".equals(ae.getActionCommand())){
			DynaMineGui.changeToGame(2, 0);
		}
		if("1 BOT".equals(ae.getActionCommand())){
			DynaMineGui.changeToGame(2, 1);
		}
		if("2 BOTS".equals(ae.getActionCommand())){
			DynaMineGui.changeToGame(2, 2);
		}
		if("GO BACK".equals(ae.getActionCommand())){
			DynaMineGui.changeToPlayerMenu();
		}
		if("QUIT GAME".equals(ae.getActionCommand())){
			DynaMineGui.changeToExit();
		}
	}
	
	public void setFocusFirst(){
		multiplayerBotbuttons[0].requestFocusInWindow();
	}
	
}