package bomberman.entities;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import bomberman.prototype.Game;
import bomberman.tools.Asset;
import bomberman.tools.GameImage;

/**
 * Player class
 * used to create players based on the character class
 * @author Lukas Pruetzel
 *
 */
public class Player extends Character{
	
	/**
	 * contains the keys for moving, placing bombs and exiting the game
	 */
	private final int[] mapping;
	
	/**
	 * previous X position in pixel (for debugging)
	 */
	private int lastX;
	
	/**
	 * previous Y position in pixel (for debugging)
	 */
	private int lastY;
	
	/**
	 * determines the previous bomb status for debugging
	 */
	private boolean lastBombStatus = false;
	
	/**
	 * identifier for the player, should be 1 or 2
	 */
	private int playerNumber;
	
	public Player (Game game, int x, int y, int[] mapping, int playerSize, int playerNumber) {
		super(game, x, y, playerSize);
		this.mapping = mapping;
		this.playerNumber = playerNumber;
	}
	
	/**
	 * Temporary code for player initialization
	 */
	public void init() {
	}
	
	/**
	 * updates the player position and bomb status
	 */
	@Override
	public void update() {
		
		updateBomb();
		
		if(getGame().getKeyboardControl().keyDown(mapping[0]) ) {
			up();
		}
		if (getGame().getKeyboardControl().keyDown(mapping[1])) {
			left();
		}
		if (getGame().getKeyboardControl().keyDown(mapping[2])) {
			down();
		}
		if (getGame().getKeyboardControl().keyDown(mapping[3])) {
			right();
		}
		if (getGame().getKeyboardControl().keyDown(mapping[4])) {
			//Exit game with ESC
			System.exit(0);
		}
		if (getGame().getKeyboardControl().keyDown(mapping[5])) {
			placeBomb();
		}
	}
	
	/**
	 * renders the player
	 * @param graphics graphics object to be drawn with
	 */
	public void render(Graphics graphics) {
		graphics.drawImage(Asset.player1, getX(), getY(), null);
	}
	
	/**
	 * Position Getter
	 * @return returns array containing X and Y position as integer
	 */
	public int[] getPosition(){
		int[] positionArr = new int[2];
		positionArr[0] = getX();
		positionArr[1] = getY();
		return positionArr;
	}
	
	/**
	 * Debugging method showing player position and bomb status
	 */
	public void printDebug() {
		if(lastX != getX() || lastY != getY()) {
			System.out.println("["+playerNumber+"]  (" + this.getX() + "/" + this.getY() + ")");
			lastX = getX();
			lastY = getY();
		}
		if(getBombStatus() != lastBombStatus) {
			lastBombStatus = getBombStatus();
			System.out.println("["+playerNumber+"] BombStatus: " + lastBombStatus);
		}
	}
}
