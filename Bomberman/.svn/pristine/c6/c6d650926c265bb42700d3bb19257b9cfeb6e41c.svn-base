package bomberman.menu;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;

public class PlayerMenu extends JPanel implements ActionListener{
	/**
	 * 
	 * @author Patrick Schneider
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	private JButton[] playermenubuttons;
	private static String[] buttonNames = {"1 PLAYER","2 PLAYER","GO BACK","QUIT GAME"};
	private ImageIcon blackBackground = new ImageIcon("res/images/Background_Img_Black.png");
	private ImageIcon arrowBackground = new ImageIcon("res/images/Background_Img_Arrows.png");
	private Font pcsenior;
	private BufferedImage backgroundImage = null;
	
	
	public PlayerMenu() {
		setSize(getPreferredSize());
		setBackground(Color.BLACK);
		setLayout(null);
		
		playermenubuttons = new JButton[buttonNames.length];
		try {
			pcsenior = Font.createFont(Font.TRUETYPE_FONT, new File("res/fonts/pcsenior.ttf")).deriveFont(18f);
		} catch (FontFormatException | IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		try{
			backgroundImage = ImageIO.read(new File("res/images/DynaMine_Menu_Background.jpg"));
		}catch (IOException ioe) {
			ioe.printStackTrace();
		}
		
		for(int i = 0; i < buttonNames.length; i++){

			final int curButton = i;
			
			playermenubuttons[i] = new JButton(buttonNames[i]);
			playermenubuttons[i].setFocusable(true);
			playermenubuttons[i].setMargin(new Insets(0, 0, 0, 0));
			playermenubuttons[i].setContentAreaFilled(false);
			playermenubuttons[i].setIcon(blackBackground);
			playermenubuttons[i].setForeground(Color.YELLOW);
			playermenubuttons[i].setHorizontalTextPosition(SwingConstants.CENTER);
			playermenubuttons[i].addActionListener(this);
			playermenubuttons[i].setActionCommand(buttonNames[i]);
			playermenubuttons[i].addKeyListener(new KeyAdapter(){
				@Override
				public void keyPressed(KeyEvent e){
					switch (e.getKeyCode()){
					case KeyEvent.VK_UP:
						if(curButton > 0){
							playermenubuttons[curButton - 1].requestFocusInWindow();
						}
						break;
					case KeyEvent.VK_DOWN:
						if(curButton < 3){
							playermenubuttons[curButton + 1].requestFocusInWindow();
						}
						break;
					default:
						break;
					}
					
				}
			});
			playermenubuttons[i].addFocusListener(new FocusListener() {

		         @Override
		         public void focusLost(FocusEvent arg0) {
		        	playermenubuttons[curButton].setForeground(Color.YELLOW);
		            playermenubuttons[curButton].setIcon(blackBackground);
		         }

		         @Override
		         public void focusGained(FocusEvent arg0) {
		        	 playermenubuttons[curButton].setForeground(Color.RED);
		            playermenubuttons[curButton].setIcon(arrowBackground);
		         }
		      });
			playermenubuttons[i].setBorder(null);
			playermenubuttons[i].setBackground(Color.BLACK);
			playermenubuttons[i].setFocusPainted(false);
			playermenubuttons[i].setFont(pcsenior);
		}
		
		playermenubuttons[0].setBounds(300, 390, 300, 40);
		playermenubuttons[1].setBounds(300, 430, 300, 40);
		playermenubuttons[2].setBounds(300, 470, 300, 40);
		playermenubuttons[3].setBounds(300, 510, 300, 40);
		
		playermenubuttons[0].requestFocusInWindow();
		
		for (int j = 0; j < buttonNames.length; j++){
			add(playermenubuttons[j]);
		}
	}
	
	@Override
	public Dimension getPreferredSize() {
		return new Dimension(900,780);
	}
	
	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		g.drawImage(backgroundImage, 0, 0, null);
	}
	
	@Override
	public void actionPerformed(ActionEvent ae) {
		
		if("1 PLAYER".equals(ae.getActionCommand())){
			DynaMineGui.changeToSingleplayerBot();
		}
		if("2 PLAYER".equals(ae.getActionCommand())){
			DynaMineGui.changeToMultiplayerBot();
		}
		if("GO BACK".equals(ae.getActionCommand())){
			DynaMineGui.changeToStart();
		}
		if("QUIT GAME".equals(ae.getActionCommand())){
			DynaMineGui.changeToExit();
		}
	}
	
	public void setFocusFirst(){
		playermenubuttons[0].requestFocusInWindow();
	}
}
