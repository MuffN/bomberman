package bomberman.entities;

import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import bomberman.maingame.Map;
import bomberman.tools.Asset;

/**
 * Character class with usage aimed at player and bot class
 *
 * @author Lukas Pruetzel
 *
 */
public abstract class Character extends Entity {

	private Bomb myBomb = null;
	private long bombTime = 0;
	private boolean placedBomb = false;
	private static int characterCounter = 1;
	private int characterNumber;

	private Rectangle rectangle;

	private List<Rectangle> passBombList = new ArrayList<Rectangle>();
	public static List<Character> characterList = new ArrayList<Character>();
	public static List<Character> characterToDelete = new ArrayList<Character>();

	public static final int CHARACTER_SIZE = 40;
	private final int CHARACTER_SPEED = 4;

	public static int characterDeathPos = 0;

	private BufferedImage deathImg = null;

	/**
	 * Character constructor
	 * 
	 * @param game
	 *            Game object, used primarily to access the keyboard inside the
	 *            player class
	 * @param x
	 *            the X position at which a character is spawned
	 * @param y
	 *            the Y position at which a character is spawned
	 * @param size
	 *            the size of the character, used to determine where a character
	 *            stops at the borders
	 */
	public Character() {
		init();
	}
	
	private void init() {
		//Assign character picture and position
		switch (Character.characterCounter) {
		case 1:
			setImage(Asset.character1);
			deathImg = Asset.cdeath1;
			setX(60);
			setY(60);
			break;
		case 2:
			setImage(Asset.character2);
			deathImg = Asset.cdeath2;
			setX(780);
			setY(60);
			break;
		case 3:
			setImage(Asset.character3);
			deathImg = Asset.cdeath3;
			setX(780);
			setY(660);
			break;
		case 4:
			setImage(Asset.character4);
			deathImg = Asset.cdeath4;
			setX(60);
			setY(660);
			break;
		default:
			System.out.println("ERROR INCORRECT PLAYER NUMBER!");
			System.exit(0);
			break;
		}
		characterNumber = Character.characterCounter;
		Character.incrementCharCount();
		//add character to the characterList (for bomb collision)
		Character.characterList.add(this);
	}

	public void up() {
		this.setNextY(-CHARACTER_SPEED);
	}

	public void down() {
		this.setNextY(CHARACTER_SPEED);
	}

	public void left() {
		this.setNextX(-CHARACTER_SPEED);
	}

	public void right() {
		this.setNextX(CHARACTER_SPEED);
	}

	//generic collision tester; test one rectangle for intersection with a list of rectangles
	public boolean checkCollision(Rectangle myRect, List<Rectangle> rectList) {
		for (Rectangle rect : rectList) {
			if (myRect.intersects(rect)) {
				return true;
			}
		}
		return false;
	}

	//generic collision tester; check one rectangle for collision with bombs
	public boolean checkBombColl(Rectangle myRect, List<Bomb> bombList) {
		for (Bomb bomb : bombList) {
			if (myRect.intersects(bomb.getBombRect())) {
				return true;
			}
		}
		return false;
	}

	//method used to place bombs, X & Y have to be top right corner
	public void placeBomb(int bombX, int bombY) {
		
		//if character has not placed a bomb yet
		if (!placedBomb && this.getX() >= 60) {
			Rectangle tempRectangle = new Rectangle(bombX, bombY, 60, 60);
			for (Bomb bomb : Bomb.bombList) {
				
				//Check if tile already has a bomb on it
				if (tempRectangle.intersects(bomb.getBombRect())) {
					tempRectangle = null;
					return;
				}
			}

			System.out.println("["+this.characterNumber + "] - BOMB PLACED");
			this.setBombTime(System.nanoTime());
			setPlacedBomb(true);
			this.setMyBomb(new Bomb(bombX, bombY));
			for (Character c : Character.characterList) {
				c.getPassBombList().add(this.getMyBomb().getBombRect());
			}
		}
	}

	// Check all possible collisions with all entities
	public int collisionMove(Rectangle myRect) {
		// Rectangle "scouts" forward
		myRect.setLocation(getNextX(), getNextY());
		checkBombs();
		if (checkBlast()) {
			return -1; // die
		}
		if (!this.checkCollision(myRect, Map.zgList) && !this.checkCollision(myRect, Map.nzgList)
				&& !this.checkBombColl(myRect, Bomb.bombList)) {
			this.move();
			return 0; // no coll

		} else if (!this.checkCollision(myRect, Map.zgList) && !this.checkCollision(myRect, Map.nzgList)) {
			boolean pass = false;
			for (Bomb bomb : Bomb.bombList) {
				if (this.getRectangle().intersects(bomb.getBombRect())
						&& this.passBombList.contains(bomb.getBombRect())) {
					pass = true;
				} else if (this.getRectangle().intersects(bomb.getBombRect())
						&& !this.passBombList.contains(bomb.getBombRect())) {
					resetNextXY();
					return 3; // bombcoll
				}
			}
			if (pass) {
				this.move();
				return 0;
			}
		}
		if (this.checkCollision(myRect, Map.nzgList)) {
			myRect.setLocation(getX(), getY());
			resetNextXY();
			return 1; // nzgColl

		} else if (this.checkCollision(myRect, Map.zgList)) {
			myRect.setLocation(getX(), getY());
			resetNextXY();
			return 2; // zgColl
		}
		myRect.setLocation(getX(), getY());
		resetNextXY();
		return 666;
	}

	// Check if the player is standing inside an explosion / blast and kill him off
	private boolean checkBlast() {
		for (Rectangle e : Map.blastList) {
			// Places dead characters on the left side of the screen
			if (e.intersects(rectangle)) {
				System.out.println("["+this.characterNumber + "] - DIED IN AN EXPLOSION");
				Character.characterToDelete.add(this);
				this.setX(0);
				this.setY(Character.characterDeathPos);
				Character.characterDeathPos += 60;
				this.resetNextXY();
				this.setImage(this.deathImg);
				return true;
			}
		}
		return false;
	}

	// Checks if the Character is still allowed to pass certain Bombs
	private void checkBombs() {
		for (Character c : Character.characterList) {
			Iterator<Rectangle> bombListItem = c.getPassBombList().iterator();
			while (bombListItem.hasNext()) {
				Rectangle bomb = bombListItem.next();
				if (!bomb.intersects(c.getRectangle()))
					// Retract permission to walk through bombs he doesn't currently stand on
					bombListItem.remove();
			}
		}
	}

	public static void incrementCharCount() {
		Character.characterCounter++;
	}
	
	// GETTER & SETTER#

	public Rectangle getRectangle() {
		return rectangle;
	}

	public void setRectangle(Rectangle rectangle) {
		this.rectangle = rectangle;
	}

	public List<Rectangle> getPassBombList() {
		return passBombList;
	}

	public void setPassBombList(List<Rectangle> passBombList) {
		this.passBombList = passBombList;
	}

	public Bomb getMyBomb() {
		return myBomb;
	}

	public void setMyBomb(Bomb myBomb) {
		this.myBomb = myBomb;
	}

	public long getBombTime() {
		return bombTime;
	}

	public void setBombTime(long bombTime) {
		this.bombTime = bombTime;
	}

	public boolean hasPlacedBomb() {
		return placedBomb;
	}

	public void setPlacedBomb(boolean placedBomb) {
		this.placedBomb = placedBomb;
	}

	public int getCharacterNumber() {
		return characterNumber;
	}

}