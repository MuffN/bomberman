package bomberman.maingame;

import bomberman.entities.Bot;
import bomberman.entities.Player;
import bomberman.input.KeyboardControl;
import bomberman.tools.Asset;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import com.sun.glass.events.KeyEvent;

/**
 * The main class for project bomberman
 * all game related objects are registered in this class
 * render() and update() methods of registered objects are executed inside
 * the game render() and update() method of the game class
 * 
 * @author Lukas Pruetzel
 * 
 */

public class Game implements Runnable {
	

	private final int[] mapping1 = {KeyEvent.VK_W, KeyEvent.VK_A, 
									KeyEvent.VK_S, KeyEvent.VK_D, 
									KeyEvent.VK_ESCAPE, KeyEvent.VK_SPACE};
	
	private final int[] mapping2 = {KeyEvent.VK_UP, KeyEvent.VK_LEFT, 
									KeyEvent.VK_DOWN, KeyEvent.VK_RIGHT, 
									KeyEvent.VK_ESCAPE, KeyEvent.VK_NUMPAD0};

	Player myPlayer;
	Player myPlayer2;
	
	Bot myBot = new Bot(this,100,100,60 );
	
	KeyboardControl keyboard = new KeyboardControl(); // polling

	private Map myMap = new Map();
	
	private Display gameDisplay;
	private String title;
	private int width, height;

	boolean running = false;

	private BufferStrategy bufferStrat; //Amount of pictures to be buffered
	private Graphics graphics; //Object to draw with
	
	Thread myThread;
	
	//Inspiration: http://www.koonsolo.com/news/dewitters-gameloop/
	private final int FRAMES_PER_SECOND = 60; //FPS aimed at
	private final double SKIP_TICKS = 1000000000 / FRAMES_PER_SECOND; //nanoseconds/FPS
	
	/**
	 * Game constructor, passes all variables into the Display constructor
	 * @param title The title of the game window
	 * @param width Width of the game in pixel
	 * @param height Height of the game in pixel
	 */	
	public Game(String title, int width, int height){
		this.width = width;
		this.height = height;
		this.title = title;
	}
	
	//Game Loop consists of update() and render(), called in run() thread
	//http://gameprogrammingpatterns.com/game-loop.html
	
	/**
	 * init() is called once at the start of the game thread in the run() method
	 */
	private void init() {
		Asset.loadAssets();
		myPlayer = new Player(this,60,60,mapping1,40,1, Asset.debug);
		myPlayer2 = new Player(this,780,60,mapping2,60,2, Asset.player2);
		gameDisplay = new Display(title, width, height);
		gameDisplay.getJFrame().addKeyListener(keyboard);
		
		myPlayer.init();
		myPlayer2.init();
		myMap.init();
		myBot.init();
	}
	
	/**
	 * updates the status of all "attached" objects
	 * such as the keyboard, various players (and bots)
	 * as well as map related information
	 */
	private void update() {
		keyboard.poll();
		myPlayer.update();
		myPlayer2.update();
	//	myBot.update();
		myBot.moveToEnemy(myBot.nextEnemy(myPlayer, myPlayer2));
		
		//DEBUG for coordinates
		
		myPlayer.printDebug();
		myPlayer2.printDebug();
	}
	
	/**
	 * renders all "attached" objects
	 * such as players (and bots)
	 * as well as the map
	 */
	private void render() {
		bufferStrat = gameDisplay.getCanvas().getBufferStrategy(); //give Display a BufferStrategy
		
		if(bufferStrat == null) {
			gameDisplay.getCanvas().createBufferStrategy(2); //Amount of Buffers (incl. Front-Buffer); Use 2 or 3
			return;
		}
		
		graphics = bufferStrat.getDrawGraphics();
		
		//graphics.clearRect(0, 0, gameDisplay.getWidth(), gameDisplay.getHeight()); //Refresh screen
		myMap.renderGround(graphics);
		myMap.render(graphics);
		
		myPlayer.render(graphics);
		myPlayer2.render(graphics);
		
		myBot.render(graphics);
		
		//Show new changes
		bufferStrat.show();
		graphics.dispose();
	}
	
	/**
	 * implemented function from runnable
	 * gets called when a thread is initialized 
	 */
	@Override
	public void run() {
		init();
		
		//Debugging
		long nanosecondsDebug = 0; //nanoseconds below 1 second
		int frameCountDebug = 0; //ticks within a second (should be 60)
		
		double deltaTime = 0;
		long currentNanoTime = 0;
		long lastNanoTime = 0;

		
		lastNanoTime = System.nanoTime(); //Set NanoTime at init()
		
		while(running) {
			currentNanoTime = System.nanoTime(); //get current NanoTime
			
			deltaTime += (currentNanoTime-lastNanoTime)/SKIP_TICKS; //add time passed divided by ticks
			nanosecondsDebug += currentNanoTime - lastNanoTime; //Debug to trigger every second
			lastNanoTime = currentNanoTime; //set last to current for next loop

			//DeltaTime >= if enough time divided by ticks skipped passed
			//only update and render if thats the case
			if(deltaTime >= 1) {
				update();
				render();
				frameCountDebug++; //increment for every update/render call within a second
				deltaTime--;
				
			}
			if(nanosecondsDebug >=1000000000) {
				System.out.println("Current FPS:" + frameCountDebug + " Target FPS: " + FRAMES_PER_SECOND);
				frameCountDebug = 0;
				nanosecondsDebug = 0;
			}
		}
	}
	
	//Start Thread starten; synchronized to avoid access problems
	//http://www.straub.as/java/threads/synchronized.html
	
	/**
	 * initialized the thread if the game is not already running
	 */
	public synchronized void start() {
		
		if(!running){
			running = true;
			
			myThread = new Thread(this);
			myThread.start();
		} else {
			return;
		}
	}
	
	/**
	 * stops the thread if the game is not already stopped
	 */
	public synchronized void stop() {
		
		if(running) {
			running = false;
			try {
				myThread.join();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		} else {
			return;
		}
	}
	
	/**
	 * returns the KeyboardControl class to access pressed keys
	 * @return KeyboardControl class with pressed keys
	 */
	public KeyboardControl getKeyboardControl() {
		return keyboard;
	}
}