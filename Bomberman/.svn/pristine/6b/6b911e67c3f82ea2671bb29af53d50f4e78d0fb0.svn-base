package bomberman.entities;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.util.Iterator;
import bomberman.maingame.Map;
import bomberman.maingame.Settings;
import bomberman.tools.ThreatChecker;

public class Bot extends Character {
	public int direction = 4;
	private int timer = 60;
	private int timerBomb = 60;
	private int timerStuck = 1;
	private int mode;
	private int lastX;
	private 	int lastY;
	private int maxX = -10;
	private int maxY = -10;
	private int minX = -10;
	private int minY = -10;
	private boolean tracked = false;
	private boolean moveDirAllowed = false;
	private boolean inDanger = false;
	ThreatChecker threatChecker;

	private Rectangle radarRect = new Rectangle(0, 0, 60 + Settings.MAX_CHARACTER_SPEED,
			60 + Settings.MAX_CHARACTER_SPEED);
	private Character enemy = null;

	public Bot(ThreatChecker threatChecker) {
		this.threatChecker = threatChecker;
		this.init();
	}

	// BOT CODE HERE
	@Override
	public void update() {
		moveDirAllowed=false;
		
		for(Rectangle r : threatChecker.getThreatList()) {
			this.getRectangle().intersects(r);
			inDanger=true;
		}
		
		if (getCharacterBombList().isEmpty()) {
			tracked = false;
		}
		this.radarRect.setLocation((int) getRectangle().getX() - (Settings.MAX_CHARACTER_SPEED / 2),
				(int) getRectangle().getY() - (Settings.MAX_CHARACTER_SPEED / 2));
		getLastPos();

	

		// if we have Bombs to update
		if (!getCharacterBombList().isEmpty()) {
			Iterator<Bomb> bombIterator = getCharacterBombList().iterator();
			while (bombIterator.hasNext()) {
				Bomb bomb = bombIterator.next();
				bomb.update();
				if (bomb.canRemoveBomb()) {
					bombIterator.remove();
				}
			}
		}

		if (timerBomb <= 0) {
			timerBomb = 60;
		} else {
			timerBomb--;
		}

		if (isAlive() && mode == 1) {
			followEnemy();
			this.getRectangle().setLocation(getNextX(), getNextY());

			if (timer == 0) {
				direction = randomNumber();

				timer = 60;

			} else {
				timer--;
			}

			if (!this.detectThreats()) {
				moveDirAllowed=true;
			}

			switch (collisionMove(this.getRectangle())) {
			case 1:
//				 int newDir = randomNumber();
//				 while (direction == newDir) {
//				 newDir = randomNumber();
//				 }
//				 direction = newDir;

				break;

			case 2:
				
				if (getCharacterBombList().isEmpty()) {
					placeBomb(this.getX(), this.getY());
					switchDir();
					
					break;
				}
	
			case 3:
				switchDir();
				break;

			}
		}
		if (!getCharacterBombList().isEmpty()) { // vorher: this.hasPlacedBomb() == true
			mode = 2; // trackMode
		} else {
			mode = 1;
		}

		if (isAlive() && mode == 2 && tracked == false) {
			//moveSafe();
randomMove();
		} else if (isAlive() && mode == 2 && tracked == true) {
			randomMove();
		}

		if (isAlive()) {
			if (timerStuck <= 0) {
				stuck();

				timerStuck = 1;
			} else {

				timerStuck--;
			}
		}
		if(moveDirAllowed && !detectThreats()) {
			moveDir();
		}
	}

	private int randomNumber() {
		return ((int) (Math.random() * 10)) % 4 + 1;
	}

	public void render(Graphics graphics) {
		// Render the bomb if it exists
		if (!getCharacterBombList().isEmpty()) {
			for (Bomb bomb : getCharacterBombList()) {
				bomb.render(graphics);
			}
		}

		// normal sized char
		graphics.drawImage(this.getImage(), getX(), getY(), null);
		this.drawSlideRects(graphics);
		graphics.drawRect((int) radarRect.getX(), (int) radarRect.getY(), (int) radarRect.getWidth(),
				(int) radarRect.getHeight());
		graphics.setColor(Color.red);
		graphics.drawRect((int) this.getRectangle().getX(), (int) this.getRectangle().getY(),
				(int) this.getRectangle().getWidth(), (int) this.getRectangle().getHeight());
		graphics.setColor(Color.black);

	}

	public void init() {
		this.resetNextXY();
		minX = this.getX() - 5;
		minY = this.getY() - 5;
		maxX = this.getX() + 5;
		maxY = this.getY() + 5;
		lastX = this.getX();
		lastY = this.getY();
		mode = 1;
	}

	private void switchDir() {

		switch (direction)

		{
		case 1:
			direction = 2;
			break;
		case 2:
			direction = 1;
			break;
		case 3:
			direction = 4;
			break;
		case 4:
			direction = 3;
			break;
		}

	}

	private void moveDir() {
		switch (direction)

		{

		case 1:
			up();
			break;
		case 2:
			down();
			break;
		case 3:
			right();
			break;
		case 4:
			left();
			break;

		}
	}

	@Override
	public String identifyChar() {
		return "Bot";
	}

	private void getEnemy() {

		double placehold;

		for (Character e : Character.characterList)

		{

			if (e != this) {
				placehold = e.getRectangle().getLocation().distance(this.getRectangle().getLocation());
				double enemyDis;
				if (enemy != null) {
					enemyDis = this.getRectangle().getLocation().distance(enemy.getRectangle().getLocation());
				} else {
					enemyDis = 1000000;

				}
				if (placehold < enemyDis) {

					enemy = e;
					System.out.println("[" + this.getCharacterNumber() + "]" + "tracks " + enemy.getCharacterNumber());
				}
			}
		}

	}

	private void followEnemy() {

		getEnemy();
		int xEnemy = enemy.getX();
		int yEnemy = enemy.getY();
		double rangeX = Math.abs(this.getX() - xEnemy);
		double rangeY = Math.abs(this.getY() - yEnemy);
		if (rangeX < 250 && rangeY < 250) {
			trackPos(xEnemy, yEnemy, 120);

		}
		if (rangeX <= 120 && rangeY <= 120) {
			tracked = true;
			if (getCharacterBombList().isEmpty()) {
				placeBomb(this.getX(), this.getY());
				
			}
		}

	}

	private void trackPos(int mx, int my, int dist) {

		int trackX = mx;
		int trackY = my;
		int trackDist = dist;

		int x = this.getX(), y = this.getY();
		int dX = x - trackX, dY = y - trackY;

		// if (dX < 250 && dY < 250) {

		if (dX > trackDist) {
			direction = 4;
			if (!this.detectThreats()) {
				moveDirAllowed=true;
			}
			collisionMove(this.getRectangle());

		}

		else if (dX < -trackDist) {
			direction = 3;
			if (!this.detectThreats()) {
				moveDirAllowed=true;
			}
			collisionMove(this.getRectangle());

		}

		else if (dY > trackDist) {
			direction = 1;
			if (!this.detectThreats()) {
				moveDirAllowed=true;
			}
			collisionMove(this.getRectangle());

		}

		else if (dY < -trackDist) {
			direction = 2;
			if (!this.detectThreats()) {
				moveDirAllowed=true;
			}
			collisionMove(this.getRectangle());

		}

	}
	// }

	// return false if not allowed to slide
	public boolean allowedToSlide() {
		// System.out.println(this.characterNumber +" checks slide");
		// we can never slide if we collide with zgs
		for (Rectangle r : this.getRectSlide()) {
			if (checkCollision(r, Map.zgList)) {
				System.out.println(this.getCharacterNumber() + " not allowed to slide");
				return false;
			}
		}

		// if two rects have a collision with the surroundings, abort sliding
		int slideRectsWithCollision = 0;

		// number of rectangle that has collision (array number of rectSlide[])
		int slideID = -1;

		for (int i = 0; i < this.getRectSlide().length; i++) {
			if (checkCollision(this.getRectSlide()[i], Map.nzgList)) {
				// store id of rectangle with collision
				slideID = i;
				slideRectsWithCollision++;
			}
			if (slideRectsWithCollision > 1) {
				// 2 slide rects have collision with nzgs
				return false;
			}
		}

		if (slideID == -1) {
			return false;
		} else {
			if (slideID == 0 && direction == 1) {
				moveX(Settings.CHARACTER_SLIDE_SPEED);
			} else if (slideID == 1 && direction == 1) {
				moveX(-Settings.CHARACTER_SLIDE_SPEED);
			} else if (slideID == 1 && direction == 3) {
				moveY(Settings.CHARACTER_SLIDE_SPEED);
			} else if (slideID == 2 && direction == 3) {
				moveY(-Settings.CHARACTER_SLIDE_SPEED);
			} else if (slideID == 3 && direction == 2) {
				moveX(Settings.CHARACTER_SLIDE_SPEED);
			} else if (slideID == 2 && direction == 2) {
				moveX(-Settings.CHARACTER_SLIDE_SPEED);
			} else if (slideID == 0 && direction == 4) {
				moveY(Settings.CHARACTER_SLIDE_SPEED);
			} else if (slideID == 3 && direction == 4) {
				moveY(-Settings.CHARACTER_SLIDE_SPEED);
			}

			return true;

		}
	}

	private void stuck() {
		if ((minX < this.getX() && this.getX() < maxX) && (minY < this.getY() && this.getY() < maxY)) {
			switchDir();
		} else {
			minX = this.getX() - 5;
			minY = this.getY() - 5;
			maxX = this.getX() + 5;
			maxY = this.getY() + 5;

		}
	}

	private void getLastPos() {
		if (lastX - 180 < this.getX() && this.getX() < lastX + 180 && lastY - 180 < this.getY()
				&& this.getY() < lastY + 180) {
			// System.out.println(lastX+" "+ lastY);
		} else {
			lastX = this.getX();
			lastY = this.getY();
		}

	}

	private void moveSafe() {
		getLastPos();
		// if (lastX != this.getX() && lastY !=this.getY())
		// {
		trackPos(lastX, lastY, 0);
		if (lastX == this.getX() && lastY == this.getY()) {
			tracked = true;

		}
		// }
		// else
		// notsave();
	}

	private boolean detectThreats() {
		if(inDanger) {
			return false;
		}
		/*
		 * switch(direction) { case 1:
		 * this.radarRect.setLocation((int)this.getRectangle().getX(),
		 * (int)this.getRectangle().getY()-20); break; case 2:
		 * this.radarRect.setLocation((int)this.getRectangle().getX(),
		 * (int)this.getRectangle().getY()+20); break; case 3:
		 * this.radarRect.setLocation((int)this.getRectangle().getX()+20,
		 * (int)this.getRectangle().getY()); break; case 4:
		 * this.radarRect.setLocation((int)this.getRectangle().getX()-20,
		 * (int)this.getRectangle().getY()); break; }
		 */
		this.radarRect.setLocation((int) this.getRectangle().getX() - (Settings.MAX_CHARACTER_SPEED / 2),
				(int) this.getRectangle().getY() - (Settings.MAX_CHARACTER_SPEED / 2));
		if (this.checkCollision(radarRect, this.threatChecker.getThreatList())) {
			System.out.println("[" + this.getCharacterNumber() + "] threat detected");
			return true;
		} else {
			// System.out.println("["+this.getCharacterNumber() + "] no threat detected");
			return false;
		}
	}

	private void randomMove() {

		for (Rectangle e : threatChecker.getThreatList()) {
			if (e.intersects(this.getRectangle())) {

				this.getRectangle().setLocation(getNextX(), getNextY());

				if (timer == 0) {
					direction = randomNumber();

					timer = 10;

				} else {
					timer--;
				}

				if (!this.detectThreats()) {
					moveDirAllowed=true;
				}
				switch (collisionMove(this.getRectangle())) {
				case 1:
					switchDir();
					break;

				case 2:
					switchDir();
					break;

				case 3:
					switchDir();
					break;

				}
			}
		}
	}
}