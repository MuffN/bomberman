package bomberman.maingame;

import bomberman.entities.Character;
import bomberman.entities.Bomb;
import bomberman.entities.Bot;
import bomberman.entities.Player;
import bomberman.entities.items.ItemManager;
import bomberman.input.KeyboardControl;
import bomberman.menu.DynaMineGui;
import bomberman.tools.ThreatChecker;

import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.awt.event.KeyEvent;

/**
 * The main class for project bomberman all game related objects are registered
 * in this class render() and update() methods of registered objects are
 * executed inside the game render() and update() method of the game class
 * 
 * @author Lukas Pruetzel
 * 
 */

public class Game implements Runnable {

	private final boolean DEBUG = true;



	/**
	 * Character related
	 */
	private int numberOfPlayers, numberOfBots;
	// Player related
	@SuppressWarnings("unused") // not really unused; used for creating player objects
	private Player player1, player2;
	private KeyboardControl keyboard = new KeyboardControl();

	// Bot related
	private Bot bot1, bot2, bot3, bot4;
	private Bot[] botList = { bot1, bot2, bot3, bot4 };
	private ThreatChecker threatChecker;

	/**
	 * Game related
	 */
	// Game end criteria
	private Thread gameThread;
	private boolean running = false; // Game Thread running
	private boolean gameOver = false; // End of round
	private Map gameMap;
	private ItemManager itemManager;

	// Drawing the game to the screen
	private Display gameDisplay;
	private BufferStrategy bufferStrat; // Amount of pictures to be buffered
	private Graphics graphics; // Object to draw with

	// Interval for Game Loop
	// Inspiration: http://www.koonsolo.com/news/dewitters-gameloop/
	private final int FRAMES_PER_SECOND = 60; // FPS aimed at
	private final double SKIP_TICKS = 1000000000 / FRAMES_PER_SECOND; // nanoseconds/FPS

	public Game(String title, int width, int height) {
		KeyboardControl.lastPressedP1 = 0;
		KeyboardControl.lastPressedP2 = 0;
		gameDisplay = new Display();
		gameDisplay.getCanvas().setPreferredSize(gameDisplay.getPreferredSize());
		gameDisplay.getCanvas().setFocusable(false);
		gameDisplay.addKeyListener(keyboard);
	}

	// Game Loop consists of update() and render(), called in run() thread
	// http://gameprogrammingpatterns.com/game-loop.html

	private void init() {
		cleanUp(); // make sure static variables are set to default

		gameMap = new Map();
		itemManager = new ItemManager(Map.zgList); // Generate Items AFTER Map has created ZGs
		threatChecker = new ThreatChecker();

		// Create player objects
		player1 = new Player(keyboard);
		if (numberOfPlayers > 1) {
			player2 = new Player(keyboard);
		}

		// Create bot objects
		for (int i = 0; i < numberOfBots; i++) {
			botList[i] = new Bot(threatChecker);
		}

		gameDisplay.requestFocusInWindow();
		if (DEBUG) {
			System.out.println(Arrays.toString(Character.characterList.toArray()));
		}
		if(Settings.INVINCIBLE_BOTS) {
			System.out.println("WARNING: Invincible Bots active!");
		}
	}

	/**
	 * updates the status of all "attached" objects such as the keyboard, various
	 * players (and bots) as well as map related information
	 */
	private void update() {
		keyboard.poll();
		if (keyboard.keyDown(KeyEvent.VK_ESCAPE)) {
			gameOver = true;
			DynaMineGui.backToMenu();

		}
		// Compare alive characters with dead character list
		int i1 = Character.characterList.size();
		int i2 = Character.characterToDelete.size();
		
		// Only one character alive -> End game
		if (i1 == (i2 + 1) && !gameOver) {
			List<Character> survivor = new ArrayList<Character>(Character.characterList);
			survivor.removeAll(Character.characterToDelete);
			Character lastCharacter = survivor.get(0);
			System.out.println("[" + lastCharacter.getCharacterNumber() + "] - WON THE GAME");
			gameOver = true;
			DynaMineGui.changeToEndScreen(lastCharacter.getCharacterNumber(), numberOfPlayers);
		}
		// The player died but bots still alive -> End game
		else if(numberOfPlayers==1 && Character.characterToDelete.contains(player1)) {
			System.out.println("[1] - LOST THE GAME (Bots won)");
			gameOver = true;
			DynaMineGui.changeToEndScreen(0, numberOfPlayers);
		}
		// Both players are dead but bots still alive -> End game
		else if(numberOfPlayers==2 && Character.characterToDelete.contains(player1) && Character.characterToDelete.contains(player2)) {
			System.out.println("[1&2] - LOST THE GAME (Bots won)");
			gameOver = true;
			DynaMineGui.changeToEndScreen(0, numberOfPlayers);
		}
		
		

		// if both players are the last living characters and die simultaneously
		if (i1 == i2 && !gameOver) {
			gameOver = true;
			DynaMineGui.changeToEndScreen(0, numberOfPlayers);
		}
		threatChecker.update();
		for (Character c : Character.characterList) {
			c.update();
		}
		itemManager.update();
	}

	/**
	 * renders all "attached" objects such as players (and bots) as well as the map
	 */
	private void render() {
		bufferStrat = gameDisplay.getCanvas().getBufferStrategy();

		if (bufferStrat == null) {
			gameDisplay.getCanvas().createBufferStrategy(2);
			return;
		}
		graphics = bufferStrat.getDrawGraphics();

		// Render map
		gameMap.render(graphics);

		// Render (visible) items
		itemManager.render(graphics);
		
		// Render characters
		for (Character c : Character.characterList) {
			c.render(graphics);
		}
		threatChecker.render(graphics);
		// Show new changes
		bufferStrat.show();
		graphics.dispose();
	}

	/**
	 * implemented function from runnable gets called when a thread is initialized
	 */
	@Override
	public void run() {
		init();
		// Debugging
		long nanosecondsDebug = 0; // nanoseconds below 1 second
		int frameCountDebug = 0; // ticks within a second (should be 60)
		double deltaTime = 0;
		long currentNanoTime = 0;
		long lastNanoTime = 0;

		lastNanoTime = System.nanoTime(); // Set NanoTime at init()

		while (running) {
			currentNanoTime = System.nanoTime(); // get current NanoTime

			deltaTime += (currentNanoTime - lastNanoTime) / SKIP_TICKS;
			nanosecondsDebug += currentNanoTime - lastNanoTime;
			lastNanoTime = currentNanoTime; // set last to current for next loop

			// DeltaTime >= if enough time divided by ticks skipped passed
			// only update and render if thats the case
			if (deltaTime >= 1) {
				update();
				render();
				frameCountDebug++;
				deltaTime--;

			}
			if (DEBUG && nanosecondsDebug >= 1000000000) {
				System.out.println(
						"Current FPS:" + frameCountDebug + " Target FPS: " + FRAMES_PER_SECOND + " " + gameThread);
				frameCountDebug = 0;
				nanosecondsDebug = 0;
			}
		}
		stop();
	}

	// Start Thread starten; synchronized to avoid access problems
	// http://www.straub.as/java/threads/synchronized.html

	/**
	 * initialized the thread if the game is not already running
	 */
	public synchronized void start() {
		if (!running) {
			running = true;

			gameThread = new Thread(this);
			gameThread.start();
		} else {
			return;
		}
	}

	/**
	 * stops the thread if the game is not already stopped
	 */
	public synchronized void stop() {
		if (running) {
			running = false;
			try {
				gameThread.join();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		} else {
			return;
		}
	}

	public void setAmountOfParticipants(int numberOfPlayers, int numberOfBots) {
		this.numberOfPlayers = numberOfPlayers;
		this.numberOfBots = numberOfBots;
	}

	public Display getgameDisplay() {
		return gameDisplay;
	}

	/**
	 * returns the KeyboardControl class to access pressed keys
	 * 
	 * @return KeyboardControl class with pressed keys
	 */
	public KeyboardControl getKeyboardControl() {
		return this.keyboard;
	}

	private void cleanUp() {
		// Reset character conter and character related lists
		Character.characterCounter = 1;
		Character.characterList.clear();
		Character.characterToDelete.clear();
		Settings.characterDeathPos = 0;
		ItemManager.AllItems.clear();
		Map.blastList.clear();
		Map.nzgList.clear();
		Map.zgList.clear();
		Map.koordinateRandom = new int[][] {{6,1,1,1,1,1,1,1,1,1,1,1,1,1,7},
										   {4,15,15,0,0,0,0,0,0,0,0,0,15,15,2},
										   {4,15,9,0,9,0,9,0,9,0,9,0,9,15,2},
										   {4,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
										   {4,0,9,0,9,0,9,0,9,0,9,0,9,0,2},
										   {4,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
										   {4,0,9,0,9,0,9,0,9,0,9,0,9,0,2},
										   {4,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
										   {4,0,9,0,9,0,9,0,9,0,9,0,9,0,2},
										   {4,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
										   {4,15,9,0,9,0,9,0,9,0,9,0,9,15,2},
										   {4,15,15,0,0,0,0,0,0,0,0,0,15,15,2},
										   {5,3,3,3,3,3,3,3,3,3,3,3,3,3,8}};
		Bomb.bombList.clear();
		
	}

}