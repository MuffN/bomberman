package bomberman.entities;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.util.Iterator;
import bomberman.maingame.Map;
import bomberman.maingame.Settings;
import bomberman.tools.ThreatChecker;

public class Bot extends Character {

	private int direction = 4;
	private int critZGCount = 10;// Map.zgList.size()/2;
	private int timer = 60;
	private int randomBombTick = 60;
	private int timerStuck = 1;
	private int mode;
	private int maxX = -10;
	private int maxY = -10;
	private int minX = -10;
	private int minY = -10;
	private boolean moveDirAllowed = false;
	private boolean inDanger = false;
	private int deathTimer = 180;
	ThreatChecker threatChecker;

	private Rectangle radarRect = new Rectangle(0, 0, 60 + Settings.MAX_CHARACTER_SPEED,
			60 + Settings.MAX_CHARACTER_SPEED);
	private Character enemy = null;

	public Bot(ThreatChecker threatChecker) {
		this.threatChecker = threatChecker;
		this.init();
	}

	// BOT CODE HERE
	@Override
	public void update() {
		if (!isAlive()) {
			if (deathTimer == 0) {
				return;
			}
			deathTimer--;
		}

		// is set to true by various methods if
		// he is allowed to move in this update iteration
		moveDirAllowed = false;
		inDanger = false;

		// check if the character is in danger of upcoming blast radius
		if(this.checkCollision(this.getRectangle(), threatChecker.getThreatList())) {
			inDanger=true;
		}
		setRadarLocation();
		randomBomb();

		updateBombs();
		checkMode();
		executeMode();

		// THIS MIGHT BE AN ISSUE
		// -----------------------
		if (isAlive()) {
			if (timerStuck <= 0) {
				stuck();
				// System.out.println("[" + this.getCharacterNumber() + "] STUCK");
				timerStuck = 1;
			} else {

				timerStuck--;
			}
		}
		// -----------------------

		if (moveDirAllowed && !detectThreats() && !avoidDeath()) {
			moveDir();
		}
	}

	private int randomNumber() {
		return ((int) (Math.random() * 10)) % 4 + 1;
	}

	public void render(Graphics graphics) {
		// Render the bomb if it exists
		if (!getCharacterBombList().isEmpty()) {
			for (Bomb bomb : getCharacterBombList()) {
				bomb.render(graphics);
			}
		}

		// draw bot
		graphics.drawImage(this.getImage(), getX(), getY(), null);

		// draw rect slides (debug)
		//this.drawSlideRects(graphics);

		// draw radarRect (debug)
//		graphics.drawRect((int) radarRect.getX(), (int) radarRect.getY(), (int) radarRect.getWidth(),
//				(int) radarRect.getHeight());

		// draw bot collisionbox in red
//		graphics.setColor(Color.red);
//		graphics.drawRect((int) this.getRectangle().getX(), (int) this.getRectangle().getY(),
//				(int) this.getRectangle().getWidth(), (int) this.getRectangle().getHeight());
//		graphics.setColor(Color.black);
	}

	public void init() {
		this.resetNextXY();
		minX = this.getX() - 5;
		minY = this.getY() - 5;
		maxX = this.getX() + 5;
		maxY = this.getY() + 5;
		mode = 1;
	}

	// force bot to turn around
	private void switchDir() {
		switch (direction) {
		case 1:
			direction = 2;
			break;
		case 2:
			direction = 1;
			break;
		case 3:
			direction = 4;
			break;
		case 4:
			direction = 3;
			break;
		}
		if (validDirection()) {
			generateNewDirection();
		}
	}

	// let bot move in desired direction
	private void moveDir() {
		switch (direction) {
		case 1:
			up();
			break;
		case 2:
			down();
			break;
		case 3:
			right();
			break;
		case 4:
			left();
			break;

		}
	}

	// find an enemy to track
	private void getEnemy() {

		double placehold;

		for (Character e : Character.characterList) {
			if (e != this) {
				placehold = e.getRectangle().getLocation().distance(this.getRectangle().getLocation());
				double enemyDis;
				if (enemy != null) {
					enemyDis = this.getRectangle().getLocation().distance(enemy.getRectangle().getLocation());
				} else {
					enemyDis = 1000000;

				}
				if (placehold < enemyDis) {

					enemy = e;
					System.out.println("[" + this.getCharacterNumber() + "]" + "tracks " + enemy.getCharacterNumber());
				}
			}
		}
	}

	// track an enemy
	private void followEnemy() {
		getEnemy();
		int xEnemy = enemy.getX();
		int yEnemy = enemy.getY();
		double rangeX = Math.abs(this.getX() - xEnemy);
		double rangeY = Math.abs(this.getY() - yEnemy);
		if (rangeX < 250 && rangeY < 250) {
			trackPos(xEnemy, yEnemy, 120);
		}
		if (rangeX <= 120 && rangeY <= 120 && getCharacterBombList().isEmpty()) {
			placeBomb(this.getX(), this.getY());
		}
	}

	// track a position on the map
	private void trackPos(int mx, int my, int dist) {

		int trackX = mx;
		int trackY = my;
		int trackDist = dist;

		int x = this.getX(), y = this.getY();
		int dX = x - trackX, dY = y - trackY;

		// if (dX < 250 && dY < 250) {

		if (dX > trackDist) {
			direction = 4;
			if (!this.detectThreats()) {
				moveDirAllowed = true;
			}
			collisionMove(this.getRectangle());

		}

		else if (dX < -trackDist) {
			direction = 3;
			if (!this.detectThreats()) {
				moveDirAllowed = true;
			}
			collisionMove(this.getRectangle());

		}

		else if (dY > trackDist) {
			direction = 1;
			if (!this.detectThreats()) {
				moveDirAllowed = true;
			}
			collisionMove(this.getRectangle());

		}

		else if (dY < -trackDist) {
			direction = 2;
			if (!this.detectThreats()) {
				moveDirAllowed = true;
			}
			collisionMove(this.getRectangle());

		}
	}
	// }

	// return false if not allowed to slide
	public boolean allowedToSlide() {
		// System.out.println(this.characterNumber +" checks slide");
		// we can never slide if we collide with zgs
		for (Rectangle r : this.getRectSlide()) {
			if (checkCollision(r, Map.zgList)) {
				//System.out.println("[" + this.getCharacterNumber() + "] not allowed to slide");

				// MAYBE ADD THIS DIRECTION TO "DIRECTIONS TO AVOID" for a few ticks

				return false;
			}
		}

		// if two rectangles have a collision with the surroundings, abort sliding
		int slideRectsWithCollision = 0;

		// number of rectangle that has collision (array number of rectSlide[])
		int slideID = -1;

		for (int i = 0; i < this.getRectSlide().length; i++) {
			if (checkCollision(this.getRectSlide()[i], Map.nzgList)) {
				// store id of rectangle with collision
				slideID = i;
				slideRectsWithCollision++;
			}
			if (slideRectsWithCollision > 1) {
				// 2 slide rects have collision with nzgs
				return false;
			}
		}

		if (slideID == -1) {
			return false;
		} else {
			if (slideID == 0 && direction == 1) {
				moveX(Settings.CHARACTER_SLIDE_SPEED);
			} else if (slideID == 1 && direction == 1) {
				moveX(-Settings.CHARACTER_SLIDE_SPEED);
			} else if (slideID == 1 && direction == 3) {
				moveY(Settings.CHARACTER_SLIDE_SPEED);
			} else if (slideID == 2 && direction == 3) {
				moveY(-Settings.CHARACTER_SLIDE_SPEED);
			} else if (slideID == 3 && direction == 2) {
				moveX(Settings.CHARACTER_SLIDE_SPEED);
			} else if (slideID == 2 && direction == 2) {
				moveX(-Settings.CHARACTER_SLIDE_SPEED);
			} else if (slideID == 0 && direction == 4) {
				moveY(Settings.CHARACTER_SLIDE_SPEED);
			} else if (slideID == 3 && direction == 4) {
				moveY(-Settings.CHARACTER_SLIDE_SPEED);
			}

			return true;

		}
	}

	// determine if the bot is currently stuck to its location
	private void stuck() {
		if ((minX < this.getX() && this.getX() < maxX) && (minY < this.getY() && this.getY() < maxY)) {
			switchDir();
		} else {
			minX = this.getX() - 5;
			minY = this.getY() - 5;
			maxX = this.getX() + 5;
			maxY = this.getY() + 5;

		}
	}

	// stop bot from suicide by walking into ongoing explosions
	// returns true if death would trigger by continuing to walk
	private boolean avoidDeath() {
		this.radarRect.setLocation((int) this.getRectangle().getX() - (Settings.MAX_CHARACTER_SPEED / 2),
				(int) this.getRectangle().getY() - (Settings.MAX_CHARACTER_SPEED / 2));
		if (this.checkCollision(radarRect, Map.blastList)) {
			//Threat detected
			//System.out.println("[" + this.getCharacterNumber() + "] threat detected");
			return true;
		} else {
			//No Threat detected
			// System.out.println("["+this.getCharacterNumber() + "] no threat detected");
			return false;
		}
	}

	// stop bot from walking into tiles within radius of placed bombs
	// returns true if the bot would walk into a dangerous tile
	// returns false if the bot is already in a dangerous tile or wouldn't walk into
	// one
	private boolean detectThreats() {
		if (inDanger) {
			return false;
		}
		this.radarRect.setLocation((int) this.getRectangle().getX() - (Settings.MAX_CHARACTER_SPEED / 2),
				(int) this.getRectangle().getY() - (Settings.MAX_CHARACTER_SPEED / 2));
		if (this.checkCollision(radarRect, this.threatChecker.getThreatList())) {
			//Threat detected
			//System.out.println("[" + this.getCharacterNumber() + "] threat detected");
			return true;
		} else {
			//No Threat detected
			// System.out.println("["+this.getCharacterNumber() + "] no threat detected");
			return false;
		}
	}

	private void randomMove() {

		for (Rectangle e : threatChecker.getThreatList()) {
			if (e.intersects(this.getRectangle())) {
				if (timer == 0) {
					generateNewDirection();
					timer = 120;

				} else {
					timer--;
				}

				if (!this.detectThreats()) {
					moveDirAllowed = true;
				}
				switch (collisionMove(this.getRectangle())) {
				case 1:
					break;

				case 2:
					switchDir();
					break;

				case 3:
					switchDir();
					break;

				}
			}
		}
	}

	private void generateNewDirection() {
		do {
			direction = randomNumber();
		} while (!validDirection());
	}

	// return false if direction is not allowed (outer border)
	private boolean validDirection() {
		// 1 up
		// 2 down
		// 3 right
		// 4 left
		if (this.getRectangle().getX() == 60 && direction == 4) {
			return false;
		} else if (this.getRectangle().getY() == 60 && direction == 2) {
			return false;
		} else if (this.getRectangle().getX() == 780 && direction == 3) {
			return false;
		} else if (this.getRectangle().getY() == 660 && direction == 1) {
			return false;
		} else {
			return true;
		}
	}

	private void setRadarLocation() {
		this.radarRect.setLocation((int) getRectangle().getX() - (Settings.MAX_CHARACTER_SPEED / 2),
				(int) getRectangle().getY() - (Settings.MAX_CHARACTER_SPEED / 2));
	}

	private void updateBombs() {
		// if we have Bombs to update
		if (!getCharacterBombList().isEmpty()) {
			Iterator<Bomb> bombIterator = getCharacterBombList().iterator();
			while (bombIterator.hasNext()) {
				Bomb bomb = bombIterator.next();
				bomb.update();
				if (bomb.canRemoveBomb()) {
					bombIterator.remove();
				}
			}
		}
	}

	private void checkMode() {
		if (!this.getCharacterBombList().isEmpty()
				&& !this.checkCollision(getRectangle(), this.threatChecker.getThreatList())) {
			mode = 3;
		} else if (this.getCharacterBombList().isEmpty()) {
			mode = 1;
		} else {
			mode = 2;
		}
	}

	private void executeMode() {

		switch (mode) {
			//BOT MODE 1
			case 1:
				if (timer == 0) {
					generateNewDirection();
	
					//System.out.println("NEW DIRECTION");
					timer = 60; // 60
				} else {
					timer--;
				}
	
				if (!this.detectThreats()) {
					moveDirAllowed = true;
				}
	
				switch (collisionMove(this.getRectangle())) {
					case 1:
						// int newDir = randomNumber();
						// while (direction == newDir) {
						// newDir = randomNumber();
						// }
						// direction = newDir;
						break;
		
					case 2: // collision with ZG
						if (getCharacterBombList().isEmpty()) {
							placeBomb(this.getX(), this.getY());
							switchDir();
							break;
						}
					case 3: // collision with bomb
						switchDir();
						break;
					}
				followEnemy();
				break;
			//BOT MODE 2
			case 2:
				randomMove();
				break;
			//BOT MODE 3
			case 3:
				if (timer == 0) {
					generateNewDirection();
	
					//System.out.println("NEW DIRECTION");
					timer = 60; // 60
				} else {
					timer--;
				}
				if(!this.checkCollision(this.getRectangle(), threatChecker.getThreatList()) && !inDanger) {
					moveDirAllowed=true;
					collisionMove(this.getRectangle());
				} else {
					//System.out.println("COLLISION");
				}
				break;
		}

	}

	private void randomBomb() {
		if (Map.zgList.size() <= this.critZGCount) {
			if (randomBombTick <= 0) {
				//System.out.println("CRIT RANGE");
				int rand = (int) (Math.random() * 100) + 1;
				if (rand <= 20) {
					this.placeBomb((int) getRectangle().getX(), (int) getRectangle().getY());
				}
				randomBombTick = 60;
			} else {
				randomBombTick--;
			}
		}
	}
}